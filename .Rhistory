2*3
x= 3
x
m = sin(314)
m
clear
clc
5*10
install.packages(c("devtools", "knitr", "rmarkdown"))
devtools::install_github("SMAC-Group/introDS")
install.packages("devtools")
?norm
?pnorm
pnorm(mean = 5, sd = 0.0035, lower.tail = TRUE)
pnorm(4.995,mean = 5, sd = 0.0035, lower.tail = TRUE)
#define vector x
x = c(0.216904, -0.077019, 4.101688, 0.589461, -0.079026, -1.120895, 0.161867, -1.119475, 0.636925, 3.225165, 1.416950, -1.266141, 5.982551, 0.333629, 0.254823, -1.884486, 0.118956, 0.333780, -1.477654, 2.401215, 5.290382, -3.791078, 0.818708, -0.618337, -0.154910, 2.466940, -1.825369, -0.263971, 1.425120, -1.122563, -1.011951, 0.678712, 0.775121, 0.043402, -1.316187, 4.539451, -2.326870, 4.631666, 3.784074, -0.565599, 0.997208, -3.831549, 0.793386, 0.157082, 3.316763, 2.116672, 1.954886, 1.716117, 0.454912, -0.155355)
#example
#define vectors X and Y
Xx = c(1.86,.22,3.55,3.29,1.25)
#example
#define vectors X and Y
X = c(1.86,.22,3.55,3.29,1.25)
Y = c(3.34,1.79,5.66,5.83,4.74)
plot(X,Y)
#Xbar is the sample mean of X
Xbar = mean(X)
Xbar
#similarly for Y
Ybar = mean(Y)
Ybar
#more advanced calculations (^ means exponent)
sum((X - Xbar)^2)
sum((X - Xbar)*(Y - Ybar))
#obtain beta1 and beta0
beta1 = 8.35866 / 7.81132
beta1
beta0 = Ybar - beta1*Xbar
beta0
#fitted values
Yhat = beta0 + beta1*X
Yhat
#residuals
e=Y-Yhat
e
#check properties of residuals:
sum(e)
sum(X*e)
sum(Yhat*e)
#main is the title of the plot, col is the color of the points
plot(X,Y,main='My Plot',col='blue')
#use abline to meake a line
abline(beta0,beta1)
# 1) Generate one observation from a Poisson distribution with lambda = 5 and assign it to an object called `test`
test = rpios(1,5)
# 1) Generate one observation from a Poisson distribution with lambda = 5 and assign it to an object called `test`
test = rpois(1,5)
# 2) Take the square root of `test` and multiply it by the logarithm of 10
sqrt(test)*log(10)
library(simts)
# Set seed for reproducibility
set.seed(1337)
# Number of observations
n = 10^4
# Generate a White Noise Process
wn = gen_gts(n, WN(sigma2 = 1))
# Generate a Quantization Noise
qn = gen_gts(n, QN(q2 = .5))
# Generate a Random Walk
rw = gen_gts(n, RW(gamma2 = .75))
par(mfrow = c(3,1))
plot(wn)
plot(qn)
plot(rw)
library(simts)
# Set seed for reproducibility
set.seed(1338)
# Number of observations
n = 10^4
# Generate a White Noise Process
wn = gen_gts(n, WN(sigma2 = 1))
# Generate a Quantization Noise
qn = gen_gts(n, QN(q2 = .5))
# Generate a Random Walk
rw = gen_gts(n, RW(gamma2 = .75))
par(mfrow = c(3,1))
plot(wn)
plot(qn)
plot(rw)
n = 10^4
# Generate a White Noise Process
wn = gen_gts(n, WN(sigma2 = 1))
# Generate a Quantization Noise
qn = gen_gts(n, QN(q2 = .5))
# Generate a Random Walk
rw = gen_gts(n, RW(gamma2 = .75))
par(mfrow = c(1,1))
plot(rw)
n = 10^4
# Generate a White Noise Process
wn = gen_gts(n, WN(sigma2 = 1))
# Generate a Quantization Noise
qn = gen_gts(n, QN(q2 = .5))
# Generate a Random Walk
rw = gen_gts(n, RW(gamma2 = .75))
par(mfrow = c(1,1))
plot(rw)
n = 10^4
# Generate a White Noise Process
wn = gen_gts(n, WN(sigma2 = 1))
# Generate a Quantization Noise
qn = gen_gts(n, QN(q2 = .5))
# Generate a Random Walk
rw = gen_gts(n, RW(gamma2 = .75))
par(mfrow = c(1,1))
plot(rw)
n = 10^4
# Generate a White Noise Process
wn = gen_gts(n, WN(sigma2 = 1))
# Generate a Quantization Noise
qn = gen_gts(n, QN(q2 = .5))
# Generate a Random Walk
rw = gen_gts(n, RW(gamma2 = .75))
par(mfrow = c(1,1))
plot(rw)
n = 10^4
# Generate a White Noise Process
wn = gen_gts(n, WN(sigma2 = 1))
# Generate a Quantization Noise
qn = gen_gts(n, QN(q2 = .5))
# Generate a Random Walk
rw = gen_gts(n, RW(gamma2 = .75))
par(mfrow = c(1,1))
plot(rw)
n = 10^4
# Generate a White Noise Process
wn = gen_gts(n, WN(sigma2 = 1))
# Generate a Quantization Noise
qn = gen_gts(n, QN(q2 = .5))
# Generate a Random Walk
rw = gen_gts(n, RW(gamma2 = .75))
par(mfrow = c(1,1))
plot(rw)
n = 10^4
# Generate a White Noise Process
wn = gen_gts(n, WN(sigma2 = 1))
# Generate a Quantization Noise
qn = gen_gts(n, QN(q2 = .5))
# Generate a Random Walk
rw = gen_gts(n, RW(gamma2 = .75))
par(mfrow = c(1,1))
plot(rw)
n = 10^4
# Generate a White Noise Process
wn = gen_gts(n, WN(sigma2 = 1))
# Generate a Quantization Noise
qn = gen_gts(n, QN(q2 = .5))
# Generate a Random Walk
rw = gen_gts(n, RW(gamma2 = .75))
par(mfrow = c(1,1))
plot(rw)
license()
install.packages("knitr")
devtools::install_github("hadley/emo")
devtools::install_github("hadley/emo")
setwd("~/GitHub/HW1-2")
